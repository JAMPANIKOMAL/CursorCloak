name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_VERSION: '1.0.2'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Test (if tests exist)
      run: dotnet test --configuration Release --no-build --verbosity normal
      continue-on-error: true
      
    - name: Create portable packages
      run: |
        Write-Host "Creating portable packages..." -ForegroundColor Cyan
        
        # Framework-dependent portable
        Write-Host "Building framework-dependent version..." -ForegroundColor Yellow
        New-Item -ItemType Directory -Path "./publish/framework/ui" -Force | Out-Null
        dotnet publish src/CursorCloak.UI/CursorCloak.UI.csproj --configuration Release --runtime win-x64 --self-contained false --output ./publish/framework/ui/
        
        # Self-contained portable  
        Write-Host "Building self-contained version..." -ForegroundColor Yellow
        New-Item -ItemType Directory -Path "./publish/self-contained/ui" -Force | Out-Null
        dotnet publish src/CursorCloak.UI/CursorCloak.UI.csproj --configuration Release --runtime win-x64 --self-contained true -p:PublishSingleFile=true -p:EnableCompressionInSingleFile=true --output ./publish/self-contained/ui/
        
        # Create ZIP packages
        Write-Host "Creating ZIP packages..." -ForegroundColor Yellow
        Compress-Archive -Path "./publish/framework/ui/*" -DestinationPath "./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64.zip" -Force
        Compress-Archive -Path "./publish/self-contained/ui/*" -DestinationPath "./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64-selfcontained.zip" -Force
        
        # Display package sizes
        $frameworkSize = [math]::Round((Get-Item "./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64.zip").Length / 1MB, 1)
        $selfContainedSize = [math]::Round((Get-Item "./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64-selfcontained.zip").Length / 1MB, 1)
        Write-Host "Framework ZIP: $frameworkSize MB" -ForegroundColor Green
        Write-Host "Self-contained ZIP: $selfContainedSize MB" -ForegroundColor Green
      shell: powershell
      
    - name: Setup InnoSetup
      run: |
        Write-Host "Setting up InnoSetup..." -ForegroundColor Cyan
        
        # Download and install Inno Setup 6.2.2 (latest stable)
        $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $output = "$env:TEMP\innosetup-installer.exe"
        
        Write-Host "Downloading InnoSetup from $url..." -ForegroundColor Yellow
        try {
          Invoke-WebRequest -Uri $url -OutFile $output -UseBasicParsing -TimeoutSec 300
          Write-Host "Download completed successfully" -ForegroundColor Green
        } catch {
          Write-Error "Failed to download InnoSetup: $($_.Exception.Message)"
          exit 1
        }
        
        Write-Host "Installing InnoSetup silently..." -ForegroundColor Yellow
        try {
          $process = Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/SP-" -Wait -PassThru
          if ($process.ExitCode -eq 0) {
            Write-Host "InnoSetup installed successfully" -ForegroundColor Green
          } else {
            Write-Error "InnoSetup installation failed with exit code: $($process.ExitCode)"
            exit 1
          }
        } catch {
          Write-Error "Failed to install InnoSetup: $($_.Exception.Message)"
          exit 1
        }
        
        # Verify installation with multiple possible paths
        $possiblePaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe",
          "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
          "$env:ProgramFiles\Inno Setup 6\ISCC.exe"
        )
        
        $isccFound = $false
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Write-Host "InnoSetup found at: $path" -ForegroundColor Green
            # Test execution - ISCC shows usage and exits with code 1 when no script provided (this is normal)
            try {
              $output = & $path 2>&1
              # If it runs and shows usage, it's working correctly
              if ($output -match "Usage:|scriptfile\.iss" -or $LASTEXITCODE -eq 1) {
                Write-Host "InnoSetup executable verified successfully" -ForegroundColor Green
                $isccFound = $true
                break
              }
            } catch {
              Write-Host "Failed to execute ISCC at $path" -ForegroundColor Yellow
            }
          }
        }
        
        if (-not $isccFound) {
          Write-Host "InnoSetup verification failed - executable not found or not working" -ForegroundColor Red
          Write-Host "Checked paths:" -ForegroundColor Yellow
          foreach ($path in $possiblePaths) {
            $exists = Test-Path $path
            Write-Host "  $path : $exists" -ForegroundColor Gray
          }
          Write-Error "InnoSetup verification failed - executable not found or not working"
          exit 1
        }
      shell: powershell
      
    - name: Build installers with InnoSetup
      run: |
        Write-Host "Building installers..." -ForegroundColor Cyan
        
        # Find InnoSetup executable
        $possiblePaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe",
          "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe",
          "$env:ProgramFiles\Inno Setup 6\ISCC.exe"
        )
        
        $isccPath = $null
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            $isccPath = $path
            Write-Host "Using InnoSetup at: $isccPath" -ForegroundColor Green
            break
          }
        }
        
        if (-not $isccPath) {
          Write-Host "InnoSetup not found in any expected location" -ForegroundColor Red
          Write-Host "Checked paths:" -ForegroundColor Yellow
          foreach ($path in $possiblePaths) {
            $exists = Test-Path $path
            Write-Host "  $path : $exists" -ForegroundColor Gray
          }
          Write-Error "InnoSetup not found in any expected location"
          exit 1
        }
        
        # Ensure output directory exists
        New-Item -ItemType Directory -Path "./releases" -Force | Out-Null
        
        try {
          # Build framework-dependent installer
          Write-Host "Building framework-dependent installer..." -ForegroundColor Yellow
          $result1 = & $isccPath "scripts\setup.iss" 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Framework installer built successfully" -ForegroundColor Green
            if (Test-Path ".\releases\CursorCloak_Setup_v${{ env.PROJECT_VERSION }}.exe") {
              $size = [math]::Round((Get-Item ".\releases\CursorCloak_Setup_v${{ env.PROJECT_VERSION }}.exe").Length / 1MB, 1)
              Write-Host "  Framework installer: $size MB" -ForegroundColor White
            }
          } else {
            Write-Warning "Framework installer build failed with exit code $LASTEXITCODE"
            Write-Host "Output: $result1" -ForegroundColor Red
          }
          
          # Build self-contained installer
          Write-Host "Building self-contained installer..." -ForegroundColor Yellow
          $result2 = & $isccPath "scripts\setup-selfcontained.iss" 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Self-contained installer built successfully" -ForegroundColor Green
            if (Test-Path ".\releases\CursorCloak_Setup_v${{ env.PROJECT_VERSION }}_SelfContained.exe") {
              $size = [math]::Round((Get-Item ".\releases\CursorCloak_Setup_v${{ env.PROJECT_VERSION }}_SelfContained.exe").Length / 1MB, 1)
              Write-Host "  Self-contained installer: $size MB" -ForegroundColor White
            }
          } else {
            Write-Warning "Self-contained installer build failed with exit code $LASTEXITCODE"
            Write-Host "Output: $result2" -ForegroundColor Red
          }
        } catch {
          Write-Error "Installer build failed: $($_.Exception.Message)"
          throw
        }
        
        # List all created files
        Write-Host "Created files in releases folder:" -ForegroundColor Cyan
        Get-ChildItem "./releases" -File | ForEach-Object {
          $size = [math]::Round($_.Length / 1MB, 1)
          Write-Host "  $($_.Name) ($size MB)" -ForegroundColor White
        }
      shell: powershell
      continue-on-error: false
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CursorCloak-v${{ env.PROJECT_VERSION }}-Build
        path: |
          ./publish/
          ./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64.zip
          ./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64-selfcontained.zip
          ./releases/CursorCloak_Setup_v${{ env.PROJECT_VERSION }}.exe
          ./releases/CursorCloak_Setup_v${{ env.PROJECT_VERSION }}_SelfContained.exe
        retention-days: 30
          
  release:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: CursorCloak-v${{ env.PROJECT_VERSION }}-Build
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64.zip
          ./CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64-selfcontained.zip
          ./releases/CursorCloak_Setup_v${{ env.PROJECT_VERSION }}.exe
          ./releases/CursorCloak_Setup_v${{ env.PROJECT_VERSION }}_SelfContained.exe
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 🎯 CursorCloak v${{ env.PROJECT_VERSION }} - Enhanced Patch Release

          ### ✨ What's New:
          - **🔧 Fixed 'Start with Windows' functionality** - Now properly saves and applies settings when toggled
          - **🗑️ Professional Uninstaller** - Complete cleanup including registry entries and user data  
          - **✅ Enhanced Registry Management** - Improved startup entry handling with validation
          - **🛡️ Better Error Handling** - More robust registry access and file operations
          - **📋 Comprehensive Cleanup** - Uninstaller removes all traces of the application

          ### 📦 Download Options:
          - **CursorCloak_Setup_v${{ env.PROJECT_VERSION }}.exe** - Framework-dependent installer (requires .NET 9.0) - ~2MB
          - **CursorCloak_Setup_v${{ env.PROJECT_VERSION }}_SelfContained.exe** - Self-contained installer (no .NET required) - ~66MB
          - **CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64.zip** - Framework-dependent portable (requires .NET 9.0) - ~0.3MB
          - **CursorCloak-v${{ env.PROJECT_VERSION }}-win-x64-selfcontained.zip** - Self-contained portable (no .NET required) - ~66MB

          ### 🔧 Requirements:
          - Windows 10/11 (x64)
          - Administrator privileges
          - .NET 9.0 Runtime (for framework-dependent versions only)

          ### 🚀 Usage:
          - **Alt + H**: Hide cursor anywhere in Windows
          - **Alt + S**: Show cursor again
          - Close window to run in background mode

          **🛡️ SmartScreen Notice:** Windows may show a security warning. Click "More info" → "Run anyway". This is normal for unsigned applications.

          Always run as administrator for proper functionality.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
